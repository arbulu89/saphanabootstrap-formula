{%- set data = pillar.cluster.configure.template.parameters %}
{%- set sid = data.sid.upper() %}
{%- set instance = '{:0>2}'.format(data.instance) %}
{%- set cloud_provider = grains['cloud_provider'] %}
{%- set host = grains['host'] %}

#
# defaults
#

rsc_defaults \
    resource-stickiness="1000" \
    migration-threshold="5000"

op_defaults \
    timeout="600"

#
# production HANA
#

{%- set nic = "nic="~pillar.cluster.interface|default('eth0')|json if cloud_provider == "google-cloud-platform" else "nic="~pillar.cluster.interface|json if pillar.cluster.interface is defined else "" %}

primitive rsc_ip_{{ sid }}_HDB{{ instance }} ocf:heartbeat:IPaddr2 \
    params \
    ip="{{ data.virtual_ip }}" cidr_netmask="{{ 32 if cloud_provider == "google-cloud-platform" else data.virtual_ip_mask }}" {{ nic }} \
    op start timeout="20" op stop timeout="20" \
    op monitor interval="10" timeout="20"

primitive rsc_SAPHanaTopology_{{ sid }}_HDB{{ instance }} ocf:suse:SAPHanaTopology \
    params \
    SID="{{ sid }}" \
    InstanceNumber="{{ instance }}" \
    op monitor interval="10" timeout="600" \
    op start interval="0" timeout="600" \
    op stop interval="0" timeout="300"

clone cln_SAPHanaTopology_{{ sid }}_HDB{{ instance }} rsc_SAPHanaTopology_{{ sid }}_HDB{{ instance }} \
    meta is-managed="true" clone-node-max="1" interleave="true"

primitive rsc_SAPHana_{{ sid }}_HDB{{ instance }} ocf:suse:SAPHana \
    params \
    SID="{{ sid }}" \
    InstanceNumber="{{ instance }}" \
    PREFER_SITE_TAKEOVER="{{ data.prefer_takeover }}" \
    AUTOMATED_REGISTER="{{ data.auto_register }}" \
    DUPLICATE_PRIMARY_TIMEOUT="7200" \
    op start interval="0" timeout="3600" \
    op stop interval="0" timeout="3600" \
    op promote interval="0" timeout="3600" \
    op monitor interval="60" role="Master" timeout="700" \
    op monitor interval="61" role="Slave" timeout="700"

ms msl_SAPHana_{{ sid }}_HDB{{ instance }} rsc_SAPHana_{{ sid }}_HDB{{ instance }} \
    meta clone-max="2" clone-node-max="1" interleave="true"

{%- if cloud_provider == "microsoft-azure" %}

primitive rsc_socat_{{ sid }}_HDB{{ instance }} anything \
  params binfile="/usr/bin/socat" cmdline_options="-U TCP-LISTEN:625{{ instance }},backlog=10,fork,reuseaddr /dev/null" \
  op monitor timeout="20" interval="10" depth="0"

group g_ip_{{ sid }}_HDB{{ instance }} rsc_ip_{{ sid }}_HDB{{ instance }} rsc_socat_{{ sid }}_HDB{{ instance }}

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 2000: g_ip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- else %}

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 2000: rsc_ip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- endif %}

order ord_SAPHana_{{ sid }}_HDB{{ instance }} Optional: cln_SAPHanaTopology_{{ sid }}_HDB{{ instance }} msl_SAPHana_{{ sid }}_HDB{{ instance }}

{%- if data.cost_optimized_parameters is defined %}
{%- set qas_sid = data.cost_optimized_parameters.sid.upper() %}
{%- set qas_instance = '{:0>2}'.format(data.cost_optimized_parameters.instance) %}
{%- set qas_remote_host = data.cost_optimized_parameters.remote_host %}

#
# non-production HANA
#

primitive rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }} ocf:heartbeat:SAPDatabase \
    params DBTYPE="HDB" SID="{{ qas_sid }}" \
    MONITOR_SERVICES="hdbindexserver|hdbnameserver" \
    op start interval="0" timeout="600" \
    op monitor interval="120" timeout="700" \
    op stop interval="0" timeout="300" \
    meta priority="100"

location loc_{{ qas_sid }}_never_on_{{ qas_remote_host }} rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }} -inf: {{ qas_remote_host }}

colocation col_{{ qas_sid }}_never_with_{{ sid }}-ip -inf: rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }}:Started \
 rsc_ip_{{ sid }}_HDB{{ instance }}

order ord_{{ qas_sid }}_stop_before_{{ sid }}-promote Mandatory: rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }}:stop \
 msl_SAPHana_{{ sid }}_HDB{{ instance }}:promote

{%- endif %}

# gcp fencing agents. Each agent will be create when the nodes join the cluster (during initialization or join)

{%- if cloud_provider == "google-cloud-platform" and data.use_fence_gce is defined and data.use_fence_gce is sameas true %}
primitive stonith-gce-{{ host }} stonith:fence_gce \
        params action=reboot plug={{ host }} pcmk_host_map="{{ host }}:{{ host }}" \
        meta target-role=Started
{%- endif %}
